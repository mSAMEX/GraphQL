type Order {
	id: Int
	market: String
	marketName: String
	kind: String
	side: String
	ord_type: String
	price: String
	avg_price: String
	state: String
	origin_volume: String
	remaining_volume: String
	executed_volume: String
	at: Int
	created_at: String
	updated_at: String
	trades_count: Int
}

type Ticker {
	id: String
	name: String
	base_unit: String
	quote_unit: String
	low: Float
	high: Float
	last: Float
	at: Int
	open: Float
	volume: Float
	sell: Float
	buy: Float
	avg_price: Float
	price_change_percent: String
}

type Trade {
	id: ID
	price: Float
	amount: Float
	total: Float
	created_at: String
	taker_type: String
	side: String
	order_id: Int
	fee_currency: String
	fee: Float
	fee_amount: Float
	market: String
	marketName: String
}

type KCandle {
	at: Int
	o: Float
	h: Float
	l: Float
	c: Float
	v: Float
}

type Beneficiary {
	id: Int
	currency: String
	name: String
	address: String
	blockchain_key: String
	full_name: String
	account_number: String
	bank_name: String
	bank_swift_code: String
	intermediary_bank_name: String
	intermediary_bank_swift_code: String
	description: String
	state: String
	visible: Boolean
	created_at: String
}

type Deposit {
	id: String
	currency: String
	amount: Float
	fee: Float
	txid: String
	confirmations: Int
	state: String
	created_at: String
	completed_at: String
}

type DepositHistory {
	page: Int
	total: Int
	perPage: Int
	deposits: [Deposit]
}

type Withdrawal {
	id: Int
	currency: String
	type: String
	amount: Float
	fee: Float
	blockchain_txid: String
	rid: String
	state: String
	confirmations: Int
	note: String
	created_at: Int
	updated_at: Int
	done_at: Int
}

type WithdrawHistory {
	page: Int
	total: Int
	perPage: Int
	withdraws: [Withdrawal]
}

type Activity {
	id: Int
	user_id: Int
	target_uid: String
	category: String
	user_ip: String
	user_agent: String
	topic: String
	action: String
	result: String
	data: String
	created_at: String
}

type ActivityHistory {
	page: Int
	total: Int
	perPage: Int
	activities: [Activity]
}

type Barcode {
	barcode: String
	url: String
}

type ERC20Config {
	erc20_contract_address: String
	gas_limit: String
	gas_price: String
}

type Currency {
	id: ID
	name: String
	symbol: String
	explorer_transaction: String
	explorer_address: String
	type: String
	deposit_enabled: Boolean
	withdrawal_enabled: Boolean
	deposit_fee: Float
	min_deposit_amount: Float
	withdraw_fee: Float
	min_withdraw_amount: Float
	withdraw_limit_24h: Float
	withdraw_limit_72h: Float
	base_factor: String
	precision: Int
	position: Int
	icon_url: String
	options: ERC20Config
	min_confirmations: Int
	created_at: String
	visible: Boolean
}

type Market {
	id: ID
	name: String
	base_unit: Currency
	quote_unit: Currency
	min_price: Float
	max_price: Float
	min_amount: Float
	amount_precision: Int
	price_precision: Int
	state: String
	ticker: Ticker
}

type Balance {
	currency: Currency
	balance: Float
	locked: Float
}

type Label {
	key: String!
	value: String
	scope: String
}

type User {
	uid: String!
	email: String!
	role: String
	level: Int
	otp: Boolean
	state: String
	referral_uid: String
	labels: [Label]
	_barong_session: String
	_barong_session_expires: String
	data: String
	created_at: String
	updated_at: String
	phones: [Phone]
	profile: Profile
	activities: [Activity]
}

type Phone {
	country: String
	number: String
	validated_at: String
}

type Profile {
	first_name: String
	last_name: String
	dob: String
	address: String
	postcode: String
	city: String
	country: String
	state: String
	metadata: String
}

type TradeHistory {
	trades: [Trade]
	page: Int
	total: Int
	perPage: Int
}

type OrderHistory {
	orders: [Order]
	page: Int
	total: Int
	perPage: Int
}

type DepositAddress {
	currency: String
	address: String
	blockchain: String
}

type AskBid {
	amount: Float
	price: Float
}

type OrderBook {
	asks: [AskBid]
	bids: [AskBid]
}

type ApiKey {
	kid: String
	algorithm: String
	scope: String
	enabled: Boolean
	secret: String
}
